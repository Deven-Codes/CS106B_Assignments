#include <iostream>
#include "maze.h"
#include "graphics.h"
#include "simpio.h"
#include "Vector.h"
#include "random.h"


using namespace std;

Vector<pointT> exPoints;
Vector<pointT> inPoints;
int rows, cols;

void CreateMaze(Maze & m);
pointT NextPoint(pointT curPt);


int main ()
{	
	Randomize();
	pointT p; 

	cout << "Enter number of rows: ";
	rows = GetInteger();
	cout << "Enter number of columns: ";
	cols = GetInteger();
	
	for(int i = 0; i < rows; i++) {
		p.row = i;
		for(int j = 0; j < cols; j++) {
			p.col = j;
			exPoints.add(p);
		}
	}

	InitGraphics();
	Maze m(rows, cols, true);
	m.draw();

	
	cout << "inPoints: " << inPoints.size() << endl;
	Vector<pointT> a((rows * cols) - 1);
	for(int i = 0; i < (rows * cols); i++) {
		p.col = -1;
		p.row = -1;
		a.add(p);
	}
	inPoints = a;

	//p.row = 9;
	//p.col = 19;
	//inPoints.setAt((rows * cols) - 1, p);
	//cout << "inPoints: " << inPoints.size() << " row: " << inPoints[(rows * cols) - 1].row 
	//	<< " col: " << inPoints[(rows * cols) - 1].col << endl;

	//cout << " row: " << inPoints[(rows * cols) - 2].row << " col: " << inPoints[(rows * cols) - 2].col << endl;
	//CreateMaze(m);

	/*for(int i = 0; i < (rows * cols); i++) {
		cout << "Point : [" <<  exPoints[i].row << ", " << exPoints[i].col << "]" << "   Index: " 
			<< (exPoints[i].row * cols) + exPoints[i].col << endl;
	}*/

	return 0;
}

/*void CreateMaze(Maze & m) {
	int x = RandomInteger(0, (rows -1));
	int y = RandomInteger(0, (cols -1));
	pointT curPt;
	pointT nextPt;
	curPt.row = x;
	curPt.col = y;
	while(true) {
		if(exPoints.isEmpty) break;
		if(pointInBounds(curPt) {
			inPoints.add(curPt);
			nextPt = NextPoint(curPt);
			if(!PointInclusive(nextPt))
			if(m.isWall(curPt, nextPt)) {
				m.setWall(curPt, nextPt, false);
			}
		}
		
	}

}*/

pointT NextPoint(pointT curPt)
{
	pointT nextPt;
	if(((curPt.row > 0) && (curPt.row < (rows - 1))) && ((curPt.col > 0) && (curPt.col < (cols - 1)))) {
		if(RandomChance(0.5)) {
			nextPt.row = curPt.row - 1;
		} else {
			nextPt.row = curPt.row + 1;
		}
		if(RandomChance(0.5)) {
			nextPt.col = curPt.col - 1;
		} else {
			nextPt.col = curPt.col + 1;
		}
	} else {
		if(curPt.row == 0) { 
			nextPt.row = curPt.row + 1; 
		} else {
			nextPt.row = curPt.row - 1;
		}
		if(curPt.col == 0) {
			nextPt.col = curPt.col + 1;
		} else {
			nextPt.col = curPt.col - 1;
		}
	}

	return nextPt;
}